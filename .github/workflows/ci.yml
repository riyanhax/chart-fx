---
name: Java CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        java: [11, 15]
      fail-fast: false
      max-parallel: 4
    name: Test JDK ${{ matrix.java }}, ${{ matrix.os }}
    environment: coverage # open environment, no critical secrets
    steps:
      - uses: actions/checkout@v2
      - name: Set version environment for version string
        run: |
          export REV=${GITHUB_REF#refs/*/}
          echo "REVISION=${REV/\//-}" >> $GITHUB_ENV
          if [[ "${GITHUB_REF#refs/tags/}" =~ ^11\.[0-9]*\.[0-9]*$ ]]; then
            echo "CHANGELIST=" >> $GITHUB_ENV
          else
            echo "CHANGELIST=-SNAPSHOT" >> $GITHUB_ENV
          fi
          echo "github ref: ${GITHUB_REF}"
          echo "setting env:"
          cat ${GITHUB_ENV}
      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Test with Maven
        run: mvn -Dgpg.skip=true --no-transfer-progress --batch-mode -Drevision=${REVISION} -Dchangelist=${CHANGELIST} package
      - name: Generate and upload coverage report
        if: matrix.java == 11
        run: |
          mvn jacoco:report-aggregate
          bash <(curl -s https://codecov.io/bash) -s chartfx-report/target/site/jacoco-aggregate/
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: results.sarif

  publish:
    name: Deploy to github packages and Sonatype OSSRH
    needs: test
    runs-on: ubuntu-18.04
    environment: deploy # has to be reviewed manually
    continue-on-error: true # do not show as failed if deploy is not run
    steps:
      - uses: actions/checkout@v2
      - name: Set version environment for version string
        run: |
          export REV=${GITHUB_REF#refs/*/}
          echo "REVISION=${REV/\//-}" >> $GITHUB_ENV
          if [[ "${GITHUB_REF#refs/tags/}" =~ ^11\.[0-9]*\.[0-9]*$ ]]; then
            echo "CHANGELIST=" >> $GITHUB_ENV
          else
            echo "CHANGELIST=-SNAPSHOT" >> $GITHUB_ENV
          fi
          echo "github ref: ${GITHUB_REF}"
          echo "setting env:"
          cat ${GITHUB_ENV}
      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Set up JDK11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          gpg-private-key: ${{ secrets.GPG_KEY }}
          gpg-passphrase: GPG_PASS
      - name: Deploy to Github Packages
        run: if [ -z "$CHANGELIST" ]; then mvn -DskipTests --no-transfer-progress --batch-mode -Drevision=${REVISION} -Dchangelist=${CHANGELIST} -Drelease=github deploy; fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PASS: ${{ secrets.GPG_PASSPHRASE }}
      - name: Set up JDK to publish to OSSRH
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: ossrh
          server-username: SONATYPE_USER
          server-password: SONATYPE_PASS
          # gpg-private-key: ${{ secrets.GPG_KEY }} # gpg key was already added in the first java-setup phase, will fail the cleanup if added again
          gpg-passphrase: GPG_PASS
      - name: Deploy to Maven Central
        run: mvn -DskipTests --no-transfer-progress --batch-mode -Drevision=${REVISION} -Dchangelist=${CHANGELIST} -Drelease=ossrh deploy
        env:
          GPG_PASS: ${{ secrets.GPG_PASSPHRASE }}
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_PASS: ${{ secrets.SONATYPE_PASS }}

  codacy:
    name: Static analysis with coverity
    needs: test
    runs-on: ubuntu-18.04
    environment: coverity # environment needs to be manually triggered only use on demand
    continue-on-error: true # do not show as faied when coverity is not run
    steps:
      - uses: actions/checkout@v2
      - name: Set version environment for version string
        run: |
          export REV=${GITHUB_REF#refs/*/}
          echo "REVISION=${REV/\//-}" >> $GITHUB_ENV
          if [[ "${GITHUB_REF#refs/tags/}" =~ ^11\.[0-9]*\.[0-9]*$ ]]; then
            echo "CHANGELIST=" >> $GITHUB_ENV
          else
            echo "CHANGELIST=-SNAPSHOT" >> $GITHUB_ENV
          fi
          echo "github ref: ${GITHUB_REF}"
          echo "setting env:"
          cat ${GITHUB_ENV}
      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Set up JDK11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Download Coverity Build Tool
        run: |
          wget -q https://scan.coverity.com/download/java/Linux --post-data "token=$TOKEN&project=chart-fx" -O cov-analysis-linux64.tar.gz
          mkdir cov-analysis-linux64
          tar xzf cov-analysis-linux64.tar.gz --strip 1 -C cov-analysis-linux64
        env:
          TOKEN: ${{ secrets.COVERITY_TOKEN }}
      - name: Build with cov-build
        run: |
          export PATH=`pwd`/cov-analysis-linux64/bin:$PATH
          cov-build --dir cov-int mvn clean compile --batch-mode -Drevision=${REVISION} -Dchangelist=${CHANGELIST}
      - name: Submit the result to Coverity Scan
        run: |
          tar czvf chartfx.tgz cov-int
          curl -sS \
            --form project=chart-fx \
            --form token=$TOKEN \
            --form email=${COVERITY_EMAIL} \
            --form file=@chartfx.tgz \
            --form version=${{ github.ref }}\
            --form description="Description" \
            https://scan.coverity.com/builds?project=chart-fx
        env:
          TOKEN: ${{ secrets.COVERITY_TOKEN }}
          COVERITY_EMAIL: ${{ secrets.COVERITY_SCAN_NOTIFICATION_EMAIL }}
...
